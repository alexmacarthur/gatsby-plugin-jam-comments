/**
 *
 * JamComments
 * Author: Alex MacArthur <alex@macarthur.me> (https://macarthur.me)
 * Version: v0.1.0
 * License: MIT
 * URL: https://github.com/alexmacarthur/gatsby-plugin-jam-comments#readme
 *
 */
!(function(e, n) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = n(require("react")))
    : "function" == typeof define && define.amd
    ? define(["react"], n)
    : ((e = e || self).JamComments = n(e.React))
})(this, function(e) {
  "use strict"
  var n = "default" in e ? e.default : e
  function t(e, n, t, r, a, o, m) {
    try {
      var c = e[o](m),
        i = c.value
    } catch (e) {
      return void t(e)
    }
    c.done ? n(i) : Promise.resolve(i).then(r, a)
  }
  function r(e) {
    return function() {
      var n = this,
        r = arguments
      return new Promise(function(a, o) {
        var m = e.apply(n, r)
        function c(e) {
          t(m, a, o, c, i, "next", e)
        }
        function i(e) {
          t(m, a, o, c, i, "throw", e)
        }
        c(void 0)
      })
    }
  }
  function a(e, n) {
    return (
      (function(e) {
        if (Array.isArray(e)) return e
      })(e) ||
      (function(e, n) {
        if ("undefined" == typeof Symbol || !(Symbol.iterator in Object(e)))
          return
        var t = [],
          r = !0,
          a = !1,
          o = void 0
        try {
          for (
            var m, c = e[Symbol.iterator]();
            !(r = (m = c.next()).done) &&
            (t.push(m.value), !n || t.length !== n);
            r = !0
          );
        } catch (e) {
          ;(a = !0), (o = e)
        } finally {
          try {
            r || null == c.return || c.return()
          } finally {
            if (a) throw o
          }
        }
        return t
      })(e, n) ||
      m(e, n) ||
      (function() {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        )
      })()
    )
  }
  function o(e) {
    return (
      (function(e) {
        if (Array.isArray(e)) return c(e)
      })(e) ||
      (function(e) {
        if ("undefined" != typeof Symbol && Symbol.iterator in Object(e))
          return Array.from(e)
      })(e) ||
      m(e) ||
      (function() {
        throw new TypeError(
          "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        )
      })()
    )
  }
  function m(e, n) {
    if (e) {
      if ("string" == typeof e) return c(e, n)
      var t = Object.prototype.toString.call(e).slice(8, -1)
      return (
        "Object" === t && e.constructor && (t = e.constructor.name),
        "Map" === t || "Set" === t
          ? Array.from(t)
          : "Arguments" === t ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
          ? c(e, n)
          : void 0
      )
    }
  }
  function c(e, n) {
    ;(null == n || n > e.length) && (n = e.length)
    for (var t = 0, r = new Array(n); t < n; t++) r[t] = e[t]
    return r
  }
  function i(e, n) {
    void 0 === n && (n = {})
    var t = n.insertAt
    if (e && "undefined" != typeof document) {
      var r = document.head || document.getElementsByTagName("head")[0],
        a = document.createElement("style")
      ;(a.type = "text/css"),
        "top" === t && r.firstChild
          ? r.insertBefore(a, r.firstChild)
          : r.appendChild(a),
        a.styleSheet
          ? (a.styleSheet.cssText = e)
          : a.appendChild(document.createTextNode(e))
    }
  }
  i(
    ".jc-Message {\n  margin-bottom: 1rem;\n  border-radius: var(--border-radius);\n  padding: .75rem 1rem;\n  color: white; }\n\n.jc-Message--error {\n  background: var(--jc-red); }\n\n.jc-Message--success {\n  background: var(--jc-green); }\n"
  )
  var s = function(e) {
    var t = e.children,
      r = e.isSuccessful,
      a = void 0 !== r && r ? "jc-Message--success" : "jc-Message--error"
    return n.createElement("div", { className: "jc-Message ".concat(a) }, t)
  }
  i(
    ".jc-CommentBox-form {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 1rem;\n  margin-bottom: 30px; }\n  @media screen and (min-width: 900px) {\n    .jc-CommentBox-form {\n      grid-template-columns: 1fr 1fr; } }\n\n.jc-CommentBox input, .jc-CommentBox textarea {\n  border: 2px solid var(--jc-gray);\n  border-radius: var(--border-radius);\n  padding: 8px; }\n\n.jc-CommentBox textarea {\n  padding: 15px; }\n\n.jc-CommentBox-textarea, .jc-CommentBox-buttonWrapper {\n  grid-column: 1 / -1; }\n\n.jc-CommentBox-label {\n  display: flex;\n  flex-direction: column; }\n  .jc-CommentBox-label input, .jc-CommentBox-label textarea {\n    margin-top: 3px; }\n\n.jc-CommentBox-button {\n  border-radius: var(--border-radius);\n  border: 2px solid var(--jc-gray);\n  background: var(--jc-gray);\n  padding: .25rem 1rem;\n  margin-top: .5rem;\n  cursor: pointer; }\n  .jc-CommentBox-button:hover {\n    border-color: var(--jc-gray-dark); }\n"
  )
  var l = function() {
      var e =
        "development" === process.env.NODE_ENV
          ? "http://localhost:4000"
          : "https://service.jamcomments.com"
      return "".concat(e, "/graphql")
    },
    u = (function() {
      var e = r(
        regeneratorRuntime.mark(function e() {
          var n,
            t,
            r,
            a,
            o,
            m,
            c,
            i = arguments
          return regeneratorRuntime.wrap(function(e) {
            for (;;)
              switch ((e.prev = e.next)) {
                case 0:
                  return (
                    (n = i.length > 0 && void 0 !== i[0] ? i[0] : {}),
                    (t = n.apiKey),
                    (r = n.domain),
                    (a = n.query),
                    (o = n.variables),
                    (m = void 0 === o ? {} : o),
                    (e.next = 3),
                    fetch(l(), {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                        "x-api-key": t,
                        "x-domain": r
                      },
                      body: JSON.stringify({ query: a, variables: m })
                    })
                  )
                case 3:
                  return (c = e.sent), (e.next = 6), c.json()
                case 6:
                  return e.abrupt("return", e.sent)
                case 7:
                case "end":
                  return e.stop()
              }
          }, e)
        })
      )
      return function() {
        return e.apply(this, arguments)
      }
    })(),
    d = process.env.GATSBY_JAM_COMMENTS_API_KEY,
    p = process.env.GATSBY_JAM_COMMENTS_DOMAIN,
    f = function(t) {
      var m = t.newComment,
        c = e.useRef(null),
        i = a(e.useState(""), 2),
        l = i[0],
        f = i[1],
        g = a(e.useState(""), 2),
        v = g[0],
        h = g[1],
        b = a(e.useState(!1), 2),
        j = b[0],
        y = b[1],
        C = (function() {
          var e = r(
            regeneratorRuntime.mark(function e(n) {
              var t, r, a, i, s, l
              return regeneratorRuntime.wrap(function(e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      return (
                        n.preventDefault(),
                        h(""),
                        f(""),
                        (g = c.current),
                        (t = o(g.elements).reduce(function(e, n) {
                          return (e[n.name] = n.value), e
                        }, {})),
                        c.current.reset(),
                        "\n      mutation CreateComment($name: String!, $path: String!, $content: String!, $emailAddress: String){\n        createComment(name: $name, path: $path, content: $content, emailAddress: $emailAddress) {\n          createdAt\n          name\n          emailAddress\n          content\n          id\n        }\n      }\n    ",
                        (r = t.name),
                        (a = t.content),
                        (i = t.emailAddress),
                        (s = {
                          name: r,
                          content: a,
                          emailAddress: i,
                          path: window.location.pathname
                        }),
                        (e.next = 10),
                        u({
                          apiKey: d,
                          domain: p,
                          query:
                            "\n      mutation CreateComment($name: String!, $path: String!, $content: String!, $emailAddress: String){\n        createComment(name: $name, path: $path, content: $content, emailAddress: $emailAddress) {\n          createdAt\n          name\n          emailAddress\n          content\n          id\n        }\n      }\n    ",
                          variables: s
                        }).catch(function() {
                          h("Sorry, something went wrong!")
                        })
                      )
                    case 10:
                      if (
                        ((l = e.sent).errors &&
                          l.errors.length &&
                          (console.log(l.errors[0].message),
                          h("Sorry, something went wrong!")),
                        !l)
                      ) {
                        e.next = 15
                        break
                      }
                      return (
                        f("Comment successfully submitted!"),
                        e.abrupt("return", m(l.data.createComment))
                      )
                    case 15:
                    case "end":
                      return e.stop()
                  }
                var g
              }, e)
            })
          )
          return function(n) {
            return e.apply(this, arguments)
          }
        })()
      return n.createElement(
        "div",
        { className: "jc-CommentBox" },
        l && n.createElement(s, { isSuccessful: !0 }, l),
        v && n.createElement(s, null, v),
        n.createElement("h3", null, "Leave a Comment"),
        n.createElement(
          "form",
          {
            onSubmit: C,
            onFocus: function() {
              return !j && y(!0)
            },
            ref: c,
            className: "jc-CommentBox-form"
          },
          n.createElement(
            "label",
            { className: "jc-CommentBox-label jc-CommentBox-textarea" },
            n.createElement("textarea", { name: "content", required: !0 })
          ),
          j &&
            n.createElement(
              n.Fragment,
              null,
              n.createElement(
                "label",
                { className: "jc-CommentBox-label" },
                "Name",
                n.createElement("input", {
                  type: "text",
                  name: "name",
                  required: !0
                })
              ),
              n.createElement(
                "label",
                { className: "jc-CommentBox-label" },
                "Email Address",
                n.createElement("input", {
                  type: "email",
                  name: "emailAddress"
                })
              ),
              n.createElement(
                "span",
                { className: "jc-CommentBox-buttonWrapper" },
                n.createElement(
                  "button",
                  { className: "jc-CommentBox-button" },
                  "Submit"
                )
              )
            )
        )
      )
    },
    g = function(e) {
      return new Date(Number(e))
    }
  i(
    ".jc-Comment * {\n  font: inherit; }\n\n.jc-Comment-details {\n  display: flex;\n  align-items: center;\n  color: var(--jc-gray-dark);\n  margin-bottom: 15px; }\n\n.jc-Comment-name {\n  margin: 0;\n  font-weight: bold; }\n\n.jc-Comment-date {\n  font-size: .75em;\n  color: var(--jc-gray-dark);\n  margin-bottom: 20px;\n  display: block; }\n\n.jc-Comment-anchor {\n  padding: 0 .05rem 0 .5rem;\n  font-weight: bold;\n  text-decoration: none;\n  color: inherit;\n  font-weight: normal; }\n  .jc-Comment-anchor:visited {\n    color: inherit; }\n"
  )
  var v = function(t) {
    var r,
      a = t.comment
    return (
      (a.content = e.useMemo(
        function() {
          return a.content.replace(/\n/g, "<br>\n")
        },
        [a.content]
      )),
      n.createElement(
        "div",
        { className: "jc-Comment" },
        n.createElement(
          "span",
          { className: "jc-Comment-details" },
          n.createElement("h6", { className: "jc-Comment-name" }, a.name),
          n.createElement(
            "a",
            {
              className: "jc-Comment-anchor",
              href: "#comment-".concat(a.id),
              "aria-label": "comment anchor link"
            },
            n.createElement(
              "time",
              {
                className: "jc-Comment-date",
                dateTime: ((r = a.createdAt), g(r).toISOString())
              },
              (function(e) {
                var n = g(e),
                  t = n.getTimezoneOffset() / 60
                return (
                  n.setHours(n.getHours() - t),
                  n
                    .toLocaleString("en-US")
                    .split(",")[0]
                    .trim()
                )
              })(a.createdAt)
            )
          )
        ),
        n.createElement(
          "div",
          { className: "jc-Comment-content" },
          n.createElement("p", {
            dangerouslySetInnerHTML: { __html: a.content }
          })
        )
      )
    )
  }
  i(
    ".jc-CommentList {\n  overflow: hidden; }\n  .jc-CommentList-count {\n    position: relative;\n    display: inline-block;\n    margin-bottom: 25px; }\n    .jc-CommentList-count:after {\n      content: '';\n      display: block;\n      position: absolute;\n      width: 100vw;\n      height: 2px;\n      background: var(--jc-gray);\n      top: 50%;\n      left: calc(100% + 20px);\n      transform: translateY(-50%); }\n  .jc-CommentList-list {\n    list-style: none;\n    padding: 0;\n    margin: 0; }\n  .jc-CommentList-item + .jc-CommentList-item {\n    margin-top: 2rem; }\n"
  )
  var h = function(e) {
    var t,
      r = e.comments
    return n.createElement(
      "div",
      { className: "jc-CommentList" },
      n.createElement(
        "span",
        { className: "jc-CommentList-count" },
        r.length,
        " ",
        ((t = "comment"), 1 === r.length ? t : "".concat(t, "s"))
      ),
      n.createElement(
        "ul",
        { className: "jc-CommentList-list" },
        r.map(function(e) {
          return n.createElement(
            "li",
            { key: e.id, className: "jc-CommentList-item" },
            n.createElement(v, { comment: e })
          )
        })
      )
    )
  }
  i(
    ".jc-Shell {\n  --jc-red: #BA274A;\n  --jc-green: #5BBA6F;\n  --jc-gray: #dfdede;\n  --jc-gray-dark: #5c5c5c;\n  --border-radius: 5px;\n  margin: 2rem 0; }\n"
  )
  return function(t) {
    var r = t.pageContext,
      m = r && r.comments ? r.comments : [],
      c = a(e.useState(m), 2),
      i = c[0],
      s = c[1]
    return n.createElement(
      "div",
      { className: "jc-Shell" },
      n.createElement(f, {
        newComment: function(e) {
          s([e].concat(o(i)))
        }
      }),
      n.createElement(h, { comments: i })
    )
  }
})
