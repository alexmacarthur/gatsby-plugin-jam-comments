;(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined"
    ? (module.exports = factory(require("react")))
    : typeof define === "function" && define.amd
    ? define(["react"], factory)
    : ((global = global || self), (global.JamComments = factory(global.React)))
})(this, function(React) {
  "use strict"

  var React__default = "default" in React ? React["default"] : React

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg)
      var value = info.value
    } catch (error) {
      reject(error)
      return
    }

    if (info.done) {
      resolve(value)
    } else {
      Promise.resolve(value).then(_next, _throw)
    }
  }

  function _asyncToGenerator(fn) {
    return function() {
      var self = this,
        args = arguments
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self, args)

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value)
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err)
        }

        _next(undefined)
      })
    }
  }

  function _slicedToArray(arr, i) {
    return (
      _arrayWithHoles(arr) ||
      _iterableToArrayLimit(arr, i) ||
      _unsupportedIterableToArray(arr, i) ||
      _nonIterableRest()
    )
  }

  function _toConsumableArray(arr) {
    return (
      _arrayWithoutHoles(arr) ||
      _iterableToArray(arr) ||
      _unsupportedIterableToArray(arr) ||
      _nonIterableSpread()
    )
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr)
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter)
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return
    var _arr = []
    var _n = true
    var _d = false
    var _e = undefined

    try {
      for (
        var _i = arr[Symbol.iterator](), _s;
        !(_n = (_s = _i.next()).done);
        _n = true
      ) {
        _arr.push(_s.value)

        if (i && _arr.length === i) break
      }
    } catch (err) {
      _d = true
      _e = err
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]()
      } finally {
        if (_d) throw _e
      }
    }

    return _arr
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return
    if (typeof o === "string") return _arrayLikeToArray(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === "Object" && o.constructor) n = o.constructor.name
    if (n === "Map" || n === "Set") return Array.from(n)
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen)
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]

    return arr2
  }

  function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    )
  }

  function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    )
  }

  function styleInject(css, ref) {
    if (ref === void 0) ref = {}
    var insertAt = ref.insertAt

    if (!css || typeof document === "undefined") {
      return
    }

    var head = document.head || document.getElementsByTagName("head")[0]
    var style = document.createElement("style")
    style.type = "text/css"

    if (insertAt === "top") {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild)
      } else {
        head.appendChild(style)
      }
    } else {
      head.appendChild(style)
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css
    } else {
      style.appendChild(document.createTextNode(css))
    }
  }

  var css_248z =
    ".jc-Error {\n  background: var(--jc-red);\n  margin-bottom: 1rem;\n  border-radius: var(--border-radius);\n  padding: .75rem 1rem;\n  color: white; }\n"
  styleInject(css_248z)

  var Error = function(_ref) {
    var children = _ref.children
    return /*#__PURE__*/ React__default.createElement(
      "div",
      {
        className: "jc-Error"
      },
      children
    )
  }

  var css_248z$1 =
    ".jc-CommentBox-form {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 1rem;\n  margin-bottom: 3rem; }\n\n.jc-CommentBox input, .jc-CommentBox textarea {\n  border: 2px solid var(--jc-gray);\n  border-radius: var(--border-radius); }\n\n.jc-CommentBox-textarea {\n  grid-column: 1 / 3; }\n\n.jc-CommentBox-label {\n  display: flex;\n  flex-direction: column; }\n\n.jc-CommentBox-button {\n  border-radius: var(--border-radius);\n  background: var(--jc-gray);\n  padding: .25rem 1rem;\n  margin-top: .5rem; }\n"
  styleInject(css_248z$1)

  var request = /*#__PURE__*/ (function() {
    var _ref = _asyncToGenerator(
      /*#__PURE__*/ regeneratorRuntime.mark(function _callee() {
        var _ref2,
          apiKey,
          domain,
          query,
          _ref2$variables,
          variables,
          response,
          _args = arguments

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch ((_context.prev = _context.next)) {
              case 0:
                ;(_ref2 =
                  _args.length > 0 && _args[0] !== undefined ? _args[0] : {}),
                  (apiKey = _ref2.apiKey),
                  (domain = _ref2.domain),
                  (query = _ref2.query),
                  (_ref2$variables = _ref2.variables),
                  (variables =
                    _ref2$variables === void 0 ? {} : _ref2$variables)
                _context.next = 3
                return fetch("http://localhost:4000/graphql", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "x-api-key": apiKey,
                    "x-domain": domain
                  },
                  body: JSON.stringify({
                    query: query,
                    variables: variables
                  })
                })

              case 3:
                response = _context.sent
                _context.next = 6
                return response.json()

              case 6:
                return _context.abrupt("return", _context.sent)

              case 7:
              case "end":
                return _context.stop()
            }
          }
        }, _callee)
      })
    )

    return function request() {
      return _ref.apply(this, arguments)
    }
  })()

  var apiKey = process.env.GATSBY_JAM_COMMENTS_API_KEY
  var domain = process.env.GATSBY_JAM_COMMENTS_DOMAIN
  var CommentBox = function(_ref) {
    var newComment = _ref.newComment
    var formRef = React.useRef(null)

    var _useState = React.useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      formErrors = _useState2[0],
      setFormErrors = _useState2[1]

    var submitComment = /*#__PURE__*/ (function() {
      var _ref2 = _asyncToGenerator(
        /*#__PURE__*/ regeneratorRuntime.mark(function _callee(e) {
          var mutationParams,
            query,
            name,
            content,
            emailAddress,
            variables,
            response
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch ((_context.prev = _context.next)) {
                case 0:
                  e.preventDefault()
                  mutationParams = _toConsumableArray(
                    formRef.current.elements
                  ).reduce(function(obj, input) {
                    obj[input.name] = input.value
                    return obj
                  }, {})
                  query =
                    "\n                mutation CreateComment($name: String!, $path: String!, $content: String!, $emailAddress: String){\n                    createComment(name: $name, path: $path, content: $content, emailAddress: $emailAddress) {\n                        createdAt\n                        name\n                        emailAddress\n                        content\n                        id\n                    }\n                }"
                  ;(name = mutationParams.name),
                    (content = mutationParams.content),
                    (emailAddress = mutationParams.emailAddress)
                  variables = {
                    name: name,
                    content: content,
                    emailAddress: emailAddress,
                    path: window.location.pathname
                  }
                  _context.next = 7
                  return request({
                    apiKey: apiKey,
                    domain: domain,
                    query: query,
                    variables: variables
                  }).catch(function(e) {
                    setFormErrors(["Sorry, something went wrong"])
                  })

                case 7:
                  response = _context.sent

                  if (response.errors) {
                    _context.next = 10
                    break
                  }

                  return _context.abrupt(
                    "return",
                    newComment(response.data.createComment)
                  )

                case 10:
                  setFormErrors(
                    response.errors.map(function(e) {
                      return e.message
                    })
                  )

                case 11:
                case "end":
                  return _context.stop()
              }
            }
          }, _callee)
        })
      )

      return function submitComment(_x) {
        return _ref2.apply(this, arguments)
      }
    })()

    return /*#__PURE__*/ React__default.createElement(
      "div",
      {
        className: "jc-CommentBox"
      },
      formErrors.map(function(error) {
        return /*#__PURE__*/ React__default.createElement(
          Error,
          {
            key: error
          },
          error
        )
      }),
      /*#__PURE__*/ React__default.createElement(
        "form",
        {
          onSubmit: submitComment,
          ref: formRef,
          className: "jc-CommentBox-form"
        },
        /*#__PURE__*/ React__default.createElement(
          "label",
          {
            className: "jc-CommentBox-label jc-CommentBox-textarea"
          },
          "Comment",
          /*#__PURE__*/ React__default.createElement("textarea", {
            name: "content",
            required: true
          })
        ),
        /*#__PURE__*/ React__default.createElement(
          "label",
          {
            className: "jc-CommentBox-label"
          },
          "Name",
          /*#__PURE__*/ React__default.createElement("input", {
            type: "text",
            name: "name",
            required: true
          })
        ),
        /*#__PURE__*/ React__default.createElement(
          "label",
          {
            className: "jc-CommentBox-label"
          },
          "Email Address",
          /*#__PURE__*/ React__default.createElement("input", {
            type: "email",
            name: "emailAddress"
          })
        ),
        /*#__PURE__*/ React__default.createElement(
          "span",
          null,
          /*#__PURE__*/ React__default.createElement(
            "button",
            {
              className: "jc-CommentBox-button"
            },
            "Submit"
          )
        )
      )
    )
  }

  var dateFromUnix = function dateFromUnix(unix) {
    return new Date(Number(unix))
  }

  var toPrettyDate = function toPrettyDate(unix) {
    var date = dateFromUnix(unix)
    var hoursOffset = date.getTimezoneOffset() / 60
    date.setHours(date.getHours() - hoursOffset)
    var dateString = date.toLocaleString("en-US").split(",")
    return dateString[0].trim()
  }
  var toIsoString = function toIsoString(unix) {
    return dateFromUnix(unix).toISOString()
  }

  var css_248z$2 =
    ".jc-Comment * {\n  font: inherit; }\n\n.jc-Comment-details {\n  display: flex;\n  align-items: center;\n  margin-bottom: .25rem;\n  color: var(--jc-gray-light); }\n\n.jc-Comment-name {\n  margin: 0;\n  font-weight: bold; }\n\n.jc-Comment-date {\n  font-size: .85em; }\n\n.jc-Comment-anchor {\n  padding: 0 .05rem 0 .5rem;\n  font-weight: bold;\n  text-decoration: none;\n  color: inherit; }\n  .jc-Comment-anchor:visited {\n    color: inherit; }\n"
  styleInject(css_248z$2)

  var Comment = function(_ref) {
    var comment = _ref.comment
    return /*#__PURE__*/ React__default.createElement(
      "div",
      {
        className: "jc-Comment"
      },
      /*#__PURE__*/ React__default.createElement(
        "span",
        {
          className: "jc-Comment-details"
        },
        /*#__PURE__*/ React__default.createElement(
          "h6",
          {
            className: "jc-Comment-name"
          },
          comment.name
        ),
        /*#__PURE__*/ React__default.createElement(
          "a",
          {
            className: "jc-Comment-anchor",
            href: "#comment-".concat(comment.id),
            "aria-label": "comment anchor link"
          },
          "#"
        ),
        /*#__PURE__*/ React__default.createElement(
          "time",
          {
            className: "jc-Comment-date",
            dateTime: toIsoString(comment.createdAt)
          },
          toPrettyDate(comment.createdAt)
        )
      ),
      /*#__PURE__*/ React__default.createElement(
        "div",
        {
          className: "jc-Comment-content"
        },
        /*#__PURE__*/ React__default.createElement("p", null, comment.content)
      )
    )
  }

  var css_248z$3 =
    ".jc-CommentList-count {\n  display: inline-block;\n  margin-bottom: 1rem; }\n\n.jc-CommentList-list {\n  list-style: none;\n  padding: 0;\n  margin: 0; }\n\n.jc-CommentList-item + .jc-CommentList-item {\n  margin-top: 2rem; }\n"
  styleInject(css_248z$3)

  var pluralize = function pluralize(items, word) {
    return items.length === 1 ? word : "".concat(word, "s")
  }

  var CommentList = function(_ref) {
    var comments = _ref.comments
    return /*#__PURE__*/ React__default.createElement(
      "div",
      {
        className: "jc-CommentList"
      },
      /*#__PURE__*/ React__default.createElement(
        "span",
        {
          className: "jc-CommentList-count"
        },
        comments.length,
        " ",
        pluralize(comments, "comment")
      ),
      /*#__PURE__*/ React__default.createElement(
        "ul",
        {
          className: "jc-CommentList-list"
        },
        comments.map(function(comment) {
          return /*#__PURE__*/ React__default.createElement(
            "li",
            {
              key: comment.id,
              className: "jc-CommentList-item"
            },
            /*#__PURE__*/ React__default.createElement(Comment, {
              comment: comment
            })
          )
        })
      )
    )
  }

  var css_248z$4 =
    ".jc-Shell {\n  --jc-red: #BA274A;\n  --jc-gray: #d4d4d4;\n  --jc-gray-light: #5c5c5c;\n  --border-radius: 3px;\n  margin: 2rem 0; }\n"
  styleInject(css_248z$4)

  var index = function(_ref) {
    var pageContext = _ref.pageContext
    var initialComments =
      pageContext && pageContext.comments ? pageContext.comments : []

    var _useState = React.useState(initialComments),
      _useState2 = _slicedToArray(_useState, 2),
      comments = _useState2[0],
      setComments = _useState2[1]

    var newComment = function newComment(_newComment) {
      setComments([_newComment].concat(_toConsumableArray(comments)))
    }

    return /*#__PURE__*/ React__default.createElement(
      "div",
      {
        className: "jc-Shell"
      },
      /*#__PURE__*/ React__default.createElement("h3", null, "Comments"),
      /*#__PURE__*/ React__default.createElement(CommentBox, {
        newComment: newComment
      }),
      /*#__PURE__*/ React__default.createElement(CommentList, {
        comments: comments
      })
    )
  }

  return index
})
