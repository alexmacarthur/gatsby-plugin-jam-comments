(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = global || self, global.JamComments = factory(global.React));
}(this, (function (React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // import {GraphQLClient} from "graphql-request";
  var getClient = (function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        apiKey = _ref.apiKey,
        domain = _ref.domain;

    return {}; // return new GraphQLClient("http://localhost:4000/graphql", {
    //   headers: {
    //     "Content-Type": "application/json",
    //     "x-api-key": apiKey,
    //     "x-domain": domain
    //   }
    // })
  });

  var apiKey = process.env.GATSBY_JAM_COMMENTS_API_KEY;
  var domain = process.env.GATSBY_JAM_COMMENTS_DOMAIN;
  var CommentBox = (function () {
    var formRef = React.useRef(null);

    var submitComment = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
        var mutationParams, query, variables;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                e.preventDefault();
                mutationParams = _toConsumableArray(formRef.current.elements).reduce(function (obj, input) {
                  obj[input.name] = input.value;
                  return obj;
                }, {});
                query = "\n                mutation CreateComment($name: String!, $path: String!, $content: String!, $twitterHandle: String, $emailAddress: String){\n                    createComment(name: $name, path: $path, content: $content, twitterHandle: $twitterHandle, emailAddress: $emailAddress) {\n                        createdAt\n                        name\n                        twitterHandle\n                        emailAddress\n                        content\n                    }\n                }";
                variables = {
                  name: mutationParams.name,
                  content: mutationParams.content,
                  twitterHandle: mutationParams.twitterHandle,
                  emailAddress: mutationParams.emailAddress,
                  path: window.location.pathname
                };
                _context.next = 6;
                return getClient({
                  apiKey: apiKey,
                  domain: domain
                }).request(query, variables);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function submitComment(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    return /*#__PURE__*/React__default.createElement("form", {
      onSubmit: submitComment,
      ref: formRef,
      className: "box"
    }, /*#__PURE__*/React__default.createElement("label", {
      className: styles.label
    }, "Comment", /*#__PURE__*/React__default.createElement("textarea", {
      name: "content",
      required: true
    })), /*#__PURE__*/React__default.createElement("label", {
      className: styles.label
    }, "Name", /*#__PURE__*/React__default.createElement("input", {
      type: "text",
      name: "name",
      required: true
    })), /*#__PURE__*/React__default.createElement("label", {
      className: styles.label
    }, "Email Address", /*#__PURE__*/React__default.createElement("input", {
      type: "email",
      name: "emailAddress"
    })), /*#__PURE__*/React__default.createElement("label", {
      className: styles.label
    }, "Twitter Handle", /*#__PURE__*/React__default.createElement("input", {
      type: "text",
      name: "twitterHandle"
    })), /*#__PURE__*/React__default.createElement("button", null, "Submit"));
  });

  var prettyDate = function prettyDate(unix) {
    var date = new Date(Number(unix));
    var hoursOffset = date.getTimezoneOffset() / 60;
    date.setHours(date.getHours() - hoursOffset);
    var dateString = date.toLocaleString("en-US").split(",");
    return dateString[0].trim();
  };

  var CommentList = (function (_ref) {
    var comments = _ref.comments;
    return /*#__PURE__*/React__default.createElement("ul", {
      className: styles.list
    }, comments.map(function (comment) {
      return /*#__PURE__*/React__default.createElement("li", {
        key: comment.id,
        className: styles.comment
      }, /*#__PURE__*/React__default.createElement("span", {
        className: styles.deets
      }, /*#__PURE__*/React__default.createElement("h6", {
        className: styles.name
      }, comment.name), /*#__PURE__*/React__default.createElement("span", {
        className: styles.date
      }, prettyDate(comment.createdAt))), /*#__PURE__*/React__default.createElement("div", {
        className: styles.content
      }, /*#__PURE__*/React__default.createElement("p", null, comment.content)));
    }));
  });

  var index = (function (_ref) {
    var pageContext = _ref.pageContext;
    var comments = pageContext.comments || [];
    return /*#__PURE__*/React__default.createElement("div", {
      className: styles.shell
    }, /*#__PURE__*/React__default.createElement("h3", null, "Comments"), /*#__PURE__*/React__default.createElement(CommentBox, null), /*#__PURE__*/React__default.createElement(CommentList, {
      comments: comments
    }));
  });

  return index;

})));
